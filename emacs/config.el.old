;;;; config.el --- Summary  -*- lexical-binding: t -*-
;;;; package --- Summary:
;;;; Commentary:
;;;; Code:
;(setenv "LSP_USE_PLISTS" "true")		;Package management
;
a;(defvar bootstrap-version)
;(let ((bootstrap-file
;	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
;	  (bootstrap-version 6))
;  (unless (file-exists-p bootstrap-file)
;	(with-current-buffer
;		(url-retrieve-synchronously
;		 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
;		 'silent 'inhibit-cookies)
;	  (goto-char (point-max))
;	  (eval-print-last-sexp)))
;  (load bootstrap-file nil 'nomessage))
;;; Integrar straight.el con use-package
;(straight-use-package 'use-package)
;(setq straight-use-package-by-default t)
;(setq use-package-always-defer t)
;
;;;----
;
;;; ============================
;;; utf-8 everywhere
;;; ============================
;(prefer-coding-system 'utf-8)
;(set-language-environment "UTF-8")
;(set-default-coding-systems 'utf-8)
;(set-terminal-coding-system 'utf-8)
;(set-keyboard-coding-system 'utf-8)
;(setq default-buffer-file-coding-system 'utf-8)
;
;
;;;######
;;; DISABLE MOUSE
;(define-minor-mode disable-mouse-mode
;  "A minor-mode that disables all mouse keybinds."
;  :global t
;  :lighter " mouse"
;  :keymap (make-sparse-keymap))
;
;(dolist (type '(mouse down-mouse drag-mouse
;					  double-mouse triple-mouse))
;  (dolist (prefix '("" C- M- S- M-S- C-M- C-S- C-M-S-))
;	;; Yes, I actually HAD to go up to 7 here.
;	(dotimes (n 7)
;	  (let ((k (format "%s%s-%s" prefix type n)))
;		(define-key disable-mouse-mode-map
;					(vector (intern k)) #'ignore)))))
;(disable-mouse-mode 1)
;;;----
;
;;;######
;;; SPECIAL REQUIRES
;(defvar rc/package-contents-refreshed nil)
;(defvar rc/system (if (eq system-type 'windows-nt)
;					  "C:/Programs/dotfiles/emacs/"
;					"~/dotfiles/emacs/"))
;
;(defun rc/package-refresh-contents-once ()
;  (when (not rc/package-contents-refreshed)
;	(setq rc/package-contents-refreshed t)
;	))
;(defun rc/require-one-package (package)
;  (when (not (package-installed-p package))
;	(rc/package-refresh-contents-once)
;	(package-install package)))
;
;(defun rc/require (&rest packages)
;  (dolist (package packages)
;	(rc/require-one-package package)))
;
;
;
;(defun rc/require-theme (theme)
;  (let ((theme-name (symbol-name theme))
;		(theme-package (intern (concat (symbol-name theme) "-theme"))))
;	(rc/require theme-package)
;	(load-theme theme t))
;  )
;
;(defun rc/toggle-window-transparency ()
;  "Toggle transparency."
;  (interactive)
;  (let ((alpha-transparency 75))
;	(pcase (frame-parameter nil 'alpha-background)
;	  (alpha-transparency (set-frame-parameter nil 'alpha-background 100))
;	  (t (set-frame-parameter nil 'alpha-background alpha-transparency)))))
;;;----
;
;;;######
;;;FONT
;(cond
; ((find-font (font-spec :name "FiraCode Nerd Font"))
;  (set-frame-font "FiraCode Nerd Font-14")))
;;;----
;
;;;######
;;; FRAME VARIABLES
;(setq inhibit-startup-screen t)
;(setq default-directory (if (eq system-type 'windows-nt)
;							"c:/projects/"
;						  "~/drive/"))
;(tool-bar-mode -1)
;(menu-bar-mode -1)
;(scroll-bar-mode -1)
;(fringe-mode -1)
;(display-line-numbers-mode t)
;(global-display-line-numbers-mode t) ;; NUMEROS DE LINEA
;(setq display-line-numbers-type 'relative)
;(setq completion-at-point-functions '(elisp-completion-at-point comint-dynamic-complete-filename t))
;(add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))
;(global-hl-line-mode 1)
;(setq visible-bell 1)
;(setq ring-bell-function 'ignore)
;(setq inhibit-compacting-font-caches t)
;(setq find-file-visit-truename t)
;(setq display-time-mode t)
;(setq make-backup-files nil) ;; DO NOT BACKUP
;(set-frame-parameter nil 'alpha-background 90)
;(add-to-list 'default-frame-alist '(alpha-background . 90))
;(setq split-width-threshold 999999)
;;;----
;
;;; ######
;;; CUSTOM THEME LOAD AND FILE LOAD
;(add-to-list 'custom-theme-load-path (concat rc/system "themes/"))
;;;----
;
;;;######
;;; CONFIG
;(setq-default tab-width 4)
;(setq-default ident-tabs-mode nil)
;;;----
;
;;;######
;;; THEMES
;;;(load-theme 'solarized-seriuusly t)
;;;(rc/require-theme 'gruber-darker)
;;;(rc/require 'solarized-theme)
;;;(load-theme 'solarized-dark-high-contrast t)
;;;(rc/require-theme 'catppuccin)
;;;(setq catppuccin-flavor 'mocha)
;;;(rc/require 'modus-themes)
;;;(load-theme 'modus-vivendi-deuteranopia 1)
;;;(rc/require 'naysayer-theme)
;;;(rc/require-theme 'dracula)
;;;(load-theme 'naysayer t)
;;;(load-theme 'naysayer-custom t)
;;;(set-cursor-color "#98fb98")
;;;(rc/require 'nord-theme)
;;;(load-theme 'naysayer t)
;(load-theme '4coder t)
;;;----
;
;;;######
;;; PLUGINS
;(package-initialize)
;(defun lsp-booster--advice-json-parse (old-fn &rest args)
;  "Try to parse bytecode instead of json."
;  (or
;   (when (equal (following-char) ?#)
;	 (let ((bytecode (read (current-buffer))))
;	   (when (byte-code-function-p bytecode)
;		 (funcall bytecode))))
;   (apply old-fn args)))
;(advice-add (if (progn (require 'json)
;					   (fboundp 'json-parse-buffer))
;				'json-parse-buffer
;			  'json-read)
;			:around
;			#'lsp-booster--advice-json-parse)
;
;(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
;  "Prepend emacs-lsp-booster command to lsp CMD."
;  (let ((orig-result (funcall old-fn cmd test?)))
;	(if (and (not test?)                             ;; for check lsp-server-present?
;			 (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
;			 lsp-use-plists
;			 (not (functionp 'json-rpc-connection))  ;; native json-rpc
;			 (executable-find "emacs-lsp-booster"))
;		(progn
;		  (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
;			(setcar orig-result command-from-exec-path))
;		  (message "Using emacs-lsp-booster for %s!" orig-result)
;		  (cons "emacs-lsp-booster" orig-result))
;	  orig-result)))
;(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
;
;(ignore-errors
;  (rc/require 'ansi-color)
;  (defun my-colorize-compilation-buffer ()
;	(when (eq major-mode 'compilation-mode)
;	  (ansi-color-apply-on-region compilation-filter-start (point-max))))
;  (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer))
;;; ----
;
;;;;;;;;;;;;;;;;;;
;;; ALL PLUGINS ;; 
;;;;;;;;;;;;;;;;;;
;
;
;(rc/require 'tree-sitter)
;(rc/require 'tree-sitter-langs)
;(rc/require 'all-the-icons)
;(rc/require 'doom-modeline)
;(rc/require 'ligature)
;(rc/require 'rainbow-delimiters)
;(rc/require 'evil)
;(rc/require 'evil-easymotion)
;(rc/require 'evil-mc)
;(rc/require 'magit)
;(rc/require 'git-gutter+)
;(rc/require 'helm)
;;(rc/require 'flycheck-rust)
;(rc/require 'flycheck)
;(rc/require 'company)
;(rc/require 'posframe)
;(rc/require 'lsp-mode)
;;; (rc/require 'lsp-ui)
;;; (rc/require 'lsp-haskell)
;;;(rc/require 'eglot)
;(rc/require 'fancy-dabbrev)
;(use-package org-superstar
;  :init
;  (org-superstart-configure-like-org-bullets)
;  :config
;  (add-hook 'org-mode-hook 'org-superstar-mode))
;(rc/require 'org-super-agenda)
;(rc/require 'mermaid-mode)
;;(rc/require 'smartparens)
;(rc/require 'vimish-fold)
;(rc/require 'evil-vimish-fold)
;										; Treesitter
;(global-tree-sitter-mode)				
;(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
;(tree-sitter-require 'rust)
;
;(setq treesit-language-source-alist
;	  '((csharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
;		(elisp "https://github.com/emacs-tree-sitter/elisp-tree-sitter.git")
;		(rust "https://github.com/tree-sitter/tree-sitter-rust.git")
;		(lua "https://github.com/tjdevries/tree-sitter-lua.git")
;		(typescript "https://github.com/tree-sitter/tree-sitter-typescript.git")
;		(clojure "https://github.com/sogaiu/tree-sitter-clojure.git")
;		(haskell "https://github.com/tree-sitter/tree-sitter-haskell.git")
;		(css "https://github.com/tree-sitter/tree-sitter-css.git")
;		(yaml "https://github.com/ikatyang/tree-sitter-yaml.git")
;		))
;										; Language modes
;(rc/require 'rust-mode)				
;(rc/require 'lua-mode)
;(rc/require 'typescript-mode)
;(rc/require 'clojure-mode)
;(rc/require 'haskell-mode)
;
;										; Autothemer
;(use-package autothemer :ensure t :defer t)
;										; HELM
;(global-set-key (kbd "C-cl" 'org-store-link)
;(define-key global-map "\C-ca" 'org-agenda)
;(global-set-key (kbd "C-l") nil)
;(global-set-key (kbd "C-l") 'duplicate-line)
;;;----
;
;;;######
;;;CUSTOM FACES
;(custom-theme-set-faces
; 'user
; '(variable-pitch ((t (:family "FiraCode Nerd Font" :height 180 :weight thin))))
; '(fixed-pitch ((t ( :family "FiraCode Nerd Font" :height 160))))) 
;(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
;
;(custom-theme-set-faces
; 'user
; '(org-block ((t (:inherit fixed-pitch))))
; '(org-code ((t (:inherit (shadow fixed-pitch)))))
; '(org-document-info ((t (:foreground "dark orange"))))
; '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
; '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
; '(org-link ((t (:foreground "royal blue" :underline t))))
; '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-property-value ((t (:inherit fixed-pitch))) t)
; '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
; '(org-table ((t (:inherit fixed-pitch :foreground "#83a598" :family "Cascadia Code"))))
; '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
; '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
;;;----
;
;;;######
;;; AUTOLOAD
;
;(require 'autoinsert)
;(auto-insert-mode t)
;(defun get-days-in-week(year week-number)
;  (let* ((jan-1 (encode-time 0 0 0 1 1 year))
;		 (days-of-week '())
;		 (day-format "%Y-%m-%d")
;		 (seconds-in-a-day 86400))
;	;; Calculate the first day of the specified year
;	(let* ((start-of-year jan-1)
;		   (iso-weekday (nth 6 (decode-time start-of-year)))
;		   (days-to-add (- 1 iso-weekday)))
;	  (setq start-of-year (time-add start-of-year (seconds-to-time (* seconds-in-a-day days-to-add))))
;	  ;; Calculate the first day of the specified week
;	  (let* ((start-of-week start-of-year)
;			 (days-to-add (* 7 (1- week-number))))
;		(setq start-of-week (time-add start-of-week (seconds-to-time (* seconds-in-a-day days-to-add))))
;		;; Collect the date strings for all the days of that week
;		(dotimes (i 7)
;		  (setq days-of-week
;				(cons (format-time-string day-format start-of-week)
;					  days-of-week))
;		  (setq start-of-week (time-add start-of-week (seconds-to-time seconds-in-a-day)))
;		  ))
;	  )
;	(reverse days-of-week)))
;
;(defun org-work-week-string (str-file-name)
;  (setq wstr (split-string str-file-name "\\-"))
;  (setq wstr1 (replace-regexp-in-string "W" "" (replace-regexp-in-string ".org" "" (nth 1 wstr)))) ;  WXX
;  (setq wstr2 (nth 0 wstr)) ; YYYY.org
;  (setq days(get-days-in-week (string-to-number wstr2) (string-to-number wstr1)))
;  (setq outputstr (concat "" "#+TITLE: REPORTES\n"))
;  (setq outputstr
;		(concat outputstr
;				(let (value) (dolist (day days value)
;							   (setq value
;									 (concat value (concat "** " day "\n")
;											 (concat "#+BEGIN: clocktable :maxlevel 6 :scope agenda :block " day " :step day :stepskip0 (t) :fileskip0 :formater :link (t) :formula % :compact (t)\n#+END:\n\n")
;											 (concat "|-\n")
;											 (concat "|*ID*|*Work Item Type*|*Title*|*Comments*|*Status*|*Duration*|*Total*|\n")
;											 (concat "|-\n")
;											 (concat "||||||||\n")
;											 (concat "|-\n")
;											 (concat "#+TBLFM: @2$7=vsum(@I$6..@>$6);T\n\n"))))))))
;
;(eval-after-load 'autoinsert
;  '(define-auto-insert
;	 '("\\([0-9]\\{4\\}\\)-W\\([0-9]\\{2\\}\\)\\.org" . "Week skeleton")
;	 '("Comienza a partir de aqui"
;	   (org-work-week-string (file-name-nondirectory (buffer-file-name)))
;	   )))
;;;----
;
;;;######
;;; LANGUAGE HOOKS
;(defun my-c-mode-common-hook ()
;  ;; my customizations for all of c-mode, c++-mode, objc-mode, java-mode
;  (c-set-offset 'substatement-open 0)
;  ;; other customizations can go here
;
;  (setq c++-tab-always-indent t)
;  (setq c-basic-offset 1)                  ;; Default is 2
;  (setq c-indent-level 1)                  ;; Default is 2
;
;  (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
;  (setq tab-width 4)
;  (setq indent-tabs-mode t)  ; use spaces only if nil
;  )
;
;(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
;;;----
;
;
;
;;; LOAD THE FILE FOR START
;(with-eval-after-load 'org
;  (defun org-agenda-files (&rest _)
;	(directory-files-recursively
;	 (if (eq system-type 'windows-nt)
;		 "C:/projects/EmacsInfo/"
;	   "~/projects/")
;	 org-agenda-file-regexp)
;	))
;
;(display-time-mode t)
;
;(provide 'config)
;;;; config.el ends here
;
;